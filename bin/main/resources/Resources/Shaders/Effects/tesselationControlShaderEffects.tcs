/*

 BioLayoutExpress3D - A tool for visualisation
 and analysis of biological networks

 Copyright (c) 2006-2012 Genome Research Ltd.
 Authors: Thanos Theo, Anton Enright, Leon Goldovsky, Ildefonso Cases, Markus Brosch, Stijn van Dongen, Michael Kargas, Benjamin Boyer and Tom Freeman
 Contact: support@biolayout.org

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

 @ author, GLSL & OpenGL code author Thanos Theo, 2012

*/

#extension GL_ARB_tessellation_shader : enable

float getDMax(in vec3, in float);

float getDMax(in vec3 point, in float radius)
{
    // get the extreme points of the sphere
    vec4 mx = vec4(point - vec3(radius, 0.0, 0.0), 1.0);
    vec4 px = vec4(point + vec3(radius, 0.0, 0.0), 1.0);
    vec4 my = vec4(point - vec3(0.0, radius, 0.0), 1.0);
    vec4 py = vec4(point + vec3(0.0, radius, 0.0), 1.0);
    vec4 mz = vec4(point - vec3(0.0, 0.0, radius), 1.0);
    vec4 pz = vec4(point + vec3(0.0, 0.0, radius), 1.0);

    // get the extreme points in clip space
    mx = gl_ModelViewProjectionMatrix * mx;
    px = gl_ModelViewProjectionMatrix * px;
    my = gl_ModelViewProjectionMatrix * my;
    py = gl_ModelViewProjectionMatrix * py;
    mz = gl_ModelViewProjectionMatrix * mz;
    pz = gl_ModelViewProjectionMatrix * pz;

    // get the extreme points in NDC space
    mx.xy /= mx.w;
    px.xy /= px.w;
    my.xy /= my.w;
    py.xy /= py.w;
    mz.xy /= mz.w;
    pz.xy /= pz.w;

    // how much NDC do the extreme points subtend?
    float dx = distance(mx.xy, px.xy);
    float dy = distance(my.xy, py.xy);
    float dz = distance(mz.xy, pz.xy);

    return length( vec3(dx, dy, dz) ); // sqrt(dx * dx + dy * dy + dz * dz);
}